# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "bento/fedora-27"


  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  config.vm.network "public_network"
	config.vm.hostname = "fedora27"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    # vb.gui = true
 
    # Customize the amount of memory on the VM:
    vb.memory = "2048"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    sudo dnf install -y patch dkms automake gcc-c++ cmake python-devel python3-devel

		sudo dnf install -y ruby
		sudo dnf install -y ruby-devel
		sudo gem install sass --no-user-install

		sudo dnf install -y php
		sudo dnf install -y php-xml

		sudo dnf install -y nginx

		sudo dnf install -y npm
		sudo dnf install -y git
		sudo dnf install -y rsync

		# is fontconfig still needed?
		sudo dnf install -y fontconfig

		sudo dnf install -y fedora-workstation-repositories
		sudo dnf config-manager --set-enabled google-chrome
		sudo dnf install -y google-chrome-stable

		# Stuff for Colin	
		sudo dnf install -y vim


  SHELL
  config.vm.provision "shell", privileged: false, inline: <<-SHELL
		# Personal stuff (well Colin's, and he set it up)
		echo "set ic" >> ~/.exrc
		echo "set ai" >> ~/.exrc
		echo "set ts=2" >> ~/.exrc
		echo "set sw=2" >> ~/.exrc
		echo "alias vi='vim'" >> ~/.bashrc
		git config --global user.email colin@datatables.net
		git config --global user.name "Colin Marks"
  SHELL
  config.vm.provision "shell", privileged: false, inline: <<-SHELL
		echo "Hello world!"
		git clone  https://github.com/DataTables/DataTablesSrc.git
		cd DataTablesSrc
		npm install
		cd build
		./make.sh all debug
		# npm run test
  SHELL
end
