# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "bento/fedora-27"

	# https://stefanscherer.github.io/access-private-github-repos-in-vagrant-up/
	config.ssh.forward_agent = true

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  config.vm.network "public_network", :mac => "080027375566", bridge: "eno1"
	config.vm.hostname = "fedora27"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    # vb.gui = true
 
    # Customize the amount of memory on the VM:
    vb.memory = "4096"
		vb.cpus = 2
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
		##################################
		# Install and Configure system stuff
		##################################
		sudo dnf install -y patch dkms automake gcc-c++ cmake python-devel python3-devel
		sudo dnf install -y git
		sudo dnf install -y jq # CLI JSON parser
		sudo dnf install -y ruby ruby-devel
		sudo gem install sass --no-user-install

		sudo dnf install -y php php-tidy php-xml php-fpm php-common php-pdo php-pdo_mysql php-pdo_pgsql
		sudo dnf install -y nginx
	
		sudo dnf install -y rsync fontconfig ssmtp sharutils

		sudo dnf install -y fedora-workstation-repositories
		sudo dnf config-manager --set-enabled google-chrome
		sudo dnf install -y google-chrome-stable
	
		# .NET Core
		sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
		wget -q https://packages.microsoft.com/config/fedora/27/prod.repo
		sudo mv prod.repo /etc/yum.repos.d/microsoft-prod.repo
		sudo chown root:root /etc/yum.repos.d/microsoft-prod.repo

		sudo dnf install -y aspnetcore-runtime-2.1
		sudo dnf install -y dotnet-sdk-2.1
		sudo dnf install -y mono-devel
  SHELL
  config.vm.provision "shell", privileged: false, inline: <<-SHELL
		##################################
		# Clone and build
		##################################

		# nvm and node - non-root setup
		curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash
		export NVM_DIR="$HOME/.nvm"
		[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
		[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
		nvm install stable
		npm install -g gulp-cli

		sudo ln -s $(nvm which current) /usr/bin/node

		######
    	# Some env stuff
    	echo "export EMAIL_ADDRESS='notify@datatables.net'" >> ~/.bashrc
    	echo "export ADDITIONAL_EMAIL_ADDRESS='colin@datatables.net allan@datatables.net'" >> ~/.bashrc

		sh /vagrant/setup_git.sh #{ENV['USER']}
		sh /vagrant/clone_git.sh > /vagrant/log-clone-git.log
  SHELL
  config.vm.provision "shell", inline: <<-SHELL
		##################################
		# Configure stuff
		##################################

		######
    	# Some env stuff
    	echo "export EMAIL_ADDRESS='notify@datatables.net'" >> ~/.bashrc
    	echo "export ADDITIONAL_EMAIL_ADDRESS='colin@datatables.net allan@datatables.net'" >> ~/.bashrc

		######
		# nginx
		######
		echo "Modify conf files"
		sudo sed -i 's/user nginx/user vagrant/g' /etc/nginx/nginx.conf
		sudo sed -i 's/worker_processes auto/worker_processes 1/g' /etc/nginx/nginx.conf
		sudo sed -i 's~user = apache~user = vagrant~g' /etc/php-fpm.d/www.conf
		sudo sed -i 's~group = apache~group = vagrant~g' /etc/php-fpm.d/www.conf
		sudo sed -i 's~listen.acl_users = apache,nginx~listen.acl_users = apache,nginx,vagrant~g' /etc/php-fpm.d/www.conf

		sudo chmod +x /var/lib/nginx
		sudo chmod +x /var/lib/nginx/tmp
		sudo chmod 777 /var/lib/nginx/tmp/client_body

		# Link to build area
		sudo mv /usr/share/nginx/html /usr/share/nginx/html.ORIG
		sudo ln -s /home/vagrant/DataTablesSrc/built/DataTables /usr/share/nginx/html

		# Editor Node and .NET proxies for nginx
		sudo cp /vagrant/nginx-editor-node.conf /etc/nginx/conf.d/
		sudo cp /vagrant/nginx-editor-netcore.conf /etc/nginx/conf.d/

		echo "Start web stuff"
		sudo service nginx start
		sudo systemctl enable nginx
		sudo service php-fpm start
		sudo systemctl enable php-fpm

		######
		# Systemd for Node and .NET servers
		######
		tee /etc/systemd/system/editor-node.service <<EOD
[Service]
WorkingDirectory=/home/vagrant/DataTablesSrc/extensions/Editor-Node-Demo
ExecStart=/usr/bin/node index.js
Restart=always
StandardOutput=syslog
StandardError=syslog
SyslogIdentifier=EditorNodeJS
User=vagrant
Group=vagrant

[Install]
WantedBy=multi-user.target
EOD
		sudo chmod +x /etc/systemd/system/editor-node.service
		sudo systemctl start editor-node
		sudo systemctl enable editor-node

		tee /etc/systemd/system/editor-net.service <<EOD
[Service]
WorkingDirectory=/home/vagrant/DataTablesSrc/extensions/Editor-NETCore-Demo/Editor NET Core demo
ExecStart=/usr/bin/dotnet run
Restart=always
StandardOutput=syslog
StandardError=syslog
SyslogIdentifier=EditorDotNET
User=vagrant
Group=vagrant

[Install]
WantedBy=multi-user.target
EOD
		sudo chmod +x /etc/systemd/system/editor-net.service
		sudo systemctl start editor-net
		sudo systemctl enable editor-net
  SHELL
	config.vm.provision "shell", path: "setup_mysql.sh"
	config.vm.provision "shell", path: "setup_postgres.sh"
	config.vm.provision "shell", path: "setup_sqlite.sh"
	config.vm.provision "shell", path: "setup_nfs.sh"
	config.vm.provision "shell", privileged: false, path: "setup_env_colin.sh"
end
